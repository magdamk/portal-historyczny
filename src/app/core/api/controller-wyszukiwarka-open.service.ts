/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from './encoder';
import { Observable }                                        from 'rxjs';

// import { RequestErrorResponse } from '../model/models';
// import { WynikWyszukiwaniaDtoAdresDto } from '../model/models';
// import { WynikWyszukiwaniaDtoDzialkaDto } from '../model/models';
// import { WynikWyszukiwaniaDtoGrobWynikDto } from '../model/models';
// import { WynikWyszukiwaniaDtoMapaWynikDto } from '../model/models';
// import { WynikWyszukiwaniaDtoObiektDto } from '../model/models';
// import { WynikWyszukiwaniaDtoWarstwaWynikDto } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from './variables';
import { Configuration }                                     from './configuration';
import { WynikWyszukiwaniaDtoObiektDto, WynikWyszukiwaniaDtoDzialkaDto, WynikWyszukiwaniaDtoGrobWynikDto } from 'src/app/modul-mapowy/mm-core/providers/wyszukiwarka-adapter';
import { WynikWyszukiwaniaDtoAdresDto } from '../modele/wynik-wyszukiwania-dto-adres-dto';
import { WynikWyszukiwaniaDtoMapaWynikDto } from '../modele/wynik-wyszukiwania-dto-mapa-wynik-dto';
import { WynikWyszukiwaniaDtoWarstwaWynikDto } from '../modele/wynik-wyszukiwania-dto-warstwa-wynik-dto';
import { environment } from 'src/environments/environment';


@Injectable({
  providedIn: 'root'
})
export class ControllerWyszukiwarkaOpenService {

    protected basePath = environment.portalMapowyApiUrl;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param fraza Wyszukiwana fraza
     * @param searchParams Parametry wyszukiwania
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajAdresy(fraza: string, searchParams?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoAdresDto>;
    public wyszukajAdresy(fraza: string, searchParams?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoAdresDto>>;
    public wyszukajAdresy(fraza: string, searchParams?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoAdresDto>>;
    public wyszukajAdresy(fraza: string, searchParams?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (fraza === null || fraza === undefined) {
            throw new Error('Required parameter fraza was null or undefined when calling wyszukajAdresy.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (fraza !== undefined && fraza !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>fraza, 'fraza');
        }
        if (searchParams !== undefined && searchParams !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>searchParams, 'searchParams');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoAdresDto>(`${this.configuration.basePath}/open/wyszukiwarka/adresy`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param fraza Wyszukiwana fraza
     * @param searchParams Parametry wyszukiwania
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajAdresyObiektySkrzyzowania(fraza: string, searchParams?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoObiektDto>;
    public wyszukajAdresyObiektySkrzyzowania(fraza: string, searchParams?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoObiektDto>>;
    public wyszukajAdresyObiektySkrzyzowania(fraza: string, searchParams?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoObiektDto>>;
    public wyszukajAdresyObiektySkrzyzowania(fraza: string, searchParams?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (fraza === null || fraza === undefined) {
            throw new Error('Required parameter fraza was null or undefined when calling wyszukajAdresyObiektySkrzyzowania.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (fraza !== undefined && fraza !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>fraza, 'fraza');
        }
        if (searchParams !== undefined && searchParams !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>searchParams, 'searchParams');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoObiektDto>(`${this.configuration.basePath}/open/wyszukiwarka/adresy-obiekty-skrzyzowania`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param obreb Obręb działki
     * @param searchParams Parametry wyszukiwania
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajDzialki(obreb: string, searchParams?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoDzialkaDto>;
    public wyszukajDzialki(obreb: string, searchParams?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoDzialkaDto>>;
    public wyszukajDzialki(obreb: string, searchParams?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoDzialkaDto>>;
    public wyszukajDzialki(obreb: string, searchParams?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (obreb === null || obreb === undefined) {
            throw new Error('Required parameter obreb was null or undefined when calling wyszukajDzialki.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (obreb !== undefined && obreb !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>obreb, 'obreb');
        }
        if (searchParams !== undefined && searchParams !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>searchParams, 'searchParams');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoDzialkaDto>(`${this.configuration.basePath}/open/wyszukiwarka/dzialki`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param searchParams Parametry wyszukiwania
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajGroby(searchParams?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoGrobWynikDto>;
    public wyszukajGroby(searchParams?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoGrobWynikDto>>;
    public wyszukajGroby(searchParams?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoGrobWynikDto>>;
    public wyszukajGroby(searchParams?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (searchParams !== undefined && searchParams !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>searchParams, 'searchParams');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoGrobWynikDto>(`${this.configuration.basePath}/open/wyszukiwarka/groby`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param fraza
     * @param liczbaWynikow
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajMapyDesktop(fraza: string, liczbaWynikow?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoMapaWynikDto>;
    public wyszukajMapyDesktop(fraza: string, liczbaWynikow?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoMapaWynikDto>>;
    public wyszukajMapyDesktop(fraza: string, liczbaWynikow?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoMapaWynikDto>>;
    public wyszukajMapyDesktop(fraza: string, liczbaWynikow?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (fraza === null || fraza === undefined) {
            throw new Error('Required parameter fraza was null or undefined when calling wyszukajMapyDesktop.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (fraza !== undefined && fraza !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>fraza, 'fraza');
        }
        if (liczbaWynikow !== undefined && liczbaWynikow !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>liczbaWynikow, 'liczbaWynikow');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoMapaWynikDto>(`${this.configuration.basePath}/open/wyszukiwarka/mapy/komputerowe`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param fraza
     * @param liczbaWynikow
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajMapyMobile(fraza: string, liczbaWynikow?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoMapaWynikDto>;
    public wyszukajMapyMobile(fraza: string, liczbaWynikow?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoMapaWynikDto>>;
    public wyszukajMapyMobile(fraza: string, liczbaWynikow?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoMapaWynikDto>>;
    public wyszukajMapyMobile(fraza: string, liczbaWynikow?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (fraza === null || fraza === undefined) {
            throw new Error('Required parameter fraza was null or undefined when calling wyszukajMapyMobile.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (fraza !== undefined && fraza !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>fraza, 'fraza');
        }
        if (liczbaWynikow !== undefined && liczbaWynikow !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>liczbaWynikow, 'liczbaWynikow');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoMapaWynikDto>(`${this.configuration.basePath}/open/wyszukiwarka/mapy/mobilne`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param fraza Wyszukiwana fraza
     * @param searchParams Parametry wyszukiwania
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajObiekty(fraza: string, searchParams?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoObiektDto>;
    public wyszukajObiekty(fraza: string, searchParams?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoObiektDto>>;
    public wyszukajObiekty(fraza: string, searchParams?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoObiektDto>>;
    public wyszukajObiekty(fraza: string, searchParams?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (fraza === null || fraza === undefined) {
            throw new Error('Required parameter fraza was null or undefined when calling wyszukajObiekty.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (fraza !== undefined && fraza !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>fraza, 'fraza');
        }
        if (searchParams !== undefined && searchParams !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>searchParams, 'searchParams');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoObiektDto>(`${this.configuration.basePath}/open/wyszukiwarka/obiekty`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param fraza Wyszukiwana fraza
     * @param lokalizacjaPoczatkowa Lokalizacja początkowa obiektów
     * @param zasieg Zasięg
     * @param searchParams Parametry wyszukiwania
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajObiektyZLokalizacja(fraza: string, lokalizacjaPoczatkowa: string, zasieg: string, searchParams?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoObiektDto>;
    public wyszukajObiektyZLokalizacja(fraza: string, lokalizacjaPoczatkowa: string, zasieg: string, searchParams?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoObiektDto>>;
    public wyszukajObiektyZLokalizacja(fraza: string, lokalizacjaPoczatkowa: string, zasieg: string, searchParams?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoObiektDto>>;
    public wyszukajObiektyZLokalizacja(fraza: string, lokalizacjaPoczatkowa: string, zasieg: string, searchParams?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (fraza === null || fraza === undefined) {
            throw new Error('Required parameter fraza was null or undefined when calling wyszukajObiektyZLokalizacja.');
        }
        if (lokalizacjaPoczatkowa === null || lokalizacjaPoczatkowa === undefined) {
            throw new Error('Required parameter lokalizacjaPoczatkowa was null or undefined when calling wyszukajObiektyZLokalizacja.');
        }
        if (zasieg === null || zasieg === undefined) {
            throw new Error('Required parameter zasieg was null or undefined when calling wyszukajObiektyZLokalizacja.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (fraza !== undefined && fraza !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>fraza, 'fraza');
        }
        if (lokalizacjaPoczatkowa !== undefined && lokalizacjaPoczatkowa !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>lokalizacjaPoczatkowa, 'lokalizacjaPoczatkowa');
        }
        if (zasieg !== undefined && zasieg !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>zasieg, 'zasieg');
        }
        if (searchParams !== undefined && searchParams !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>searchParams, 'searchParams');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoObiektDto>(`${this.configuration.basePath}/open/wyszukiwarka/obiekty-z-lokalizacja`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param fraza
     * @param liczbaWynikow
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajWarstwyDesktop(fraza: string, liczbaWynikow?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoWarstwaWynikDto>;
    public wyszukajWarstwyDesktop(fraza: string, liczbaWynikow?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoWarstwaWynikDto>>;
    public wyszukajWarstwyDesktop(fraza: string, liczbaWynikow?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoWarstwaWynikDto>>;
    public wyszukajWarstwyDesktop(fraza: string, liczbaWynikow?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (fraza === null || fraza === undefined) {
            throw new Error('Required parameter fraza was null or undefined when calling wyszukajWarstwyDesktop.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (fraza !== undefined && fraza !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>fraza, 'fraza');
        }
        if (liczbaWynikow !== undefined && liczbaWynikow !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>liczbaWynikow, 'liczbaWynikow');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoWarstwaWynikDto>(`${this.configuration.basePath}/open/wyszukiwarka/warstwy/komputerowe`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param fraza
     * @param liczbaWynikow
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wyszukajWarstwyMobile(fraza: string, liczbaWynikow?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<WynikWyszukiwaniaDtoWarstwaWynikDto>;
    public wyszukajWarstwyMobile(fraza: string, liczbaWynikow?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<WynikWyszukiwaniaDtoWarstwaWynikDto>>;
    public wyszukajWarstwyMobile(fraza: string, liczbaWynikow?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<WynikWyszukiwaniaDtoWarstwaWynikDto>>;
    public wyszukajWarstwyMobile(fraza: string, liczbaWynikow?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (fraza === null || fraza === undefined) {
            throw new Error('Required parameter fraza was null or undefined when calling wyszukajWarstwyMobile.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (fraza !== undefined && fraza !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>fraza, 'fraza');
        }
        if (liczbaWynikow !== undefined && liczbaWynikow !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>liczbaWynikow, 'liczbaWynikow');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<WynikWyszukiwaniaDtoWarstwaWynikDto>(`${this.configuration.basePath}/open/wyszukiwarka/warstwy/mobile`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
